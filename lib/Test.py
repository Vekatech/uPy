from os import uname
from machine import I2C,SPI,Pin
from ssd1306 import SSD1306_I2C
from st7789 import ST7789,WHITE,GREEN,RED
from framebuf import FrameBuffer,MONO_VLSB

BRD = uname().machine

Logo = bytearray(b'\x00\x00\x80\xe0\xf0\xf8\xf8\xfc\xfe\xfe\xfe\xff\xff\xff\xff\xff' + \
                 b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff' + \
                 b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff' + \
                 b'\xff\xff\xff\xff\xff\xfe\xfe\xfe\xfc\xf8\xf8\xf0\xe0\x80\x00\x00' + \
                 b'\xf8\xff\xff\xff\xff\xff\xff\xff\xff\x7f\x7f\x7f\x3f\x3f\x1f\x1f' + \
                 b'\x1f\x0f\x0f\x0f\x0f\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x03' + \
                 b'\x03\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x0f\x0f\x0f\x0f\x1f' + \
                 b'\x1f\x1f\x3f\x3f\x7f\x7f\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xf8' + \
                 b'\x3f\x1f\x0f\x07\x07\x03\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00' + \
                 b'\x80\x80\xc0\x00\x00\x00\x00\x00\x00\x00\x00\x80\xc0\xc0\xc0\xc0' + \
                 b'\xc0\xc0\xc0\xc0\x80\x00\x00\x00\x00\x00\x00\x00\x00\xc0\x80\x80' + \
                 b'\x00\x00\x00\x00\x00\x00\x00\x00\x01\x01\x03\x07\x07\x0f\x1f\x3f' + \
                 b'\x00\x00\x00\x00\x80\xe0\xe0\xf0\xf8\xf8\xfc\xfc\xfe\xfe\xff\xff' + \
                 b'\xff\xff\x03\x00\x00\x00\x00\x00\xf8\xfe\xff\xff\xff\xff\xc7\x83' + \
                 b'\x03\x83\x83\xc7\xff\xff\xfe\xf8\x00\x00\x00\x00\x00\x03\xff\xff' + \
                 b'\xff\xff\xfe\xfe\xfc\xfc\xf8\xf8\xf0\xe0\xe0\x80\x00\x00\x00\x00' + \
                 b'\x00\x00\x00\x07\x1f\x3f\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff' + \
                 b'\xff\xff\xf8\xe0\xc0\x00\x00\x00\x00\x03\x07\x0f\x0f\x1f\x1f\x1f' + \
                 b'\x1f\x1f\x1f\x0f\x0f\x07\x03\x00\x00\x00\x00\xc0\xe0\xf8\xff\xff' + \
                 b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\x7f\x3f\x1f\x07\x00\x00\x00' + \
                 b'\xfc\xf8\xf0\xe0\xe0\xc0\x80\x80\x01\x01\x03\x03\x07\x07\x0f\x0f' + \
                 b'\x1f\x1f\x1f\x3f\x3f\x3f\x7e\x7e\x7c\xf8\xf8\xf0\xf0\xf0\xf0\xf0' + \
                 b'\xf0\xf0\xf0\xf0\xf0\xf8\xf8\x7c\x7e\x7e\x7f\x3f\x3f\x1f\x1f\x1f' + \
                 b'\x0f\x0f\x07\x07\x03\x03\x01\x01\x80\x80\xc0\xe0\xe0\xf0\xf8\xfc' + \
                 b'\x1f\xff\xff\xff\xff\xff\xff\xff\xff\xfe\xfe\xfe\xfc\xfc\xf8\xf8' + \
                 b'\xf8\xf0\xf0\xf0\xf0\xe0\xe0\xe0\xe0\xe0\xe0\xe0\xe0\xe0\xe0\xc0' + \
                 b'\xc0\xe0\xe0\xe0\xe0\xe0\xe0\xe0\xe0\xe0\xe0\xf0\xf0\xf0\xf0\xf8' + \
                 b'\xf8\xf8\xfc\xfc\xfe\xfe\xfe\xff\xff\xff\xff\xff\xff\xff\xff\x1f' + \
                 b'\x00\x00\x01\x07\x0f\x1f\x1f\x3f\x7f\x7f\x7f\xff\xff\xff\xff\xff' + \
                 b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff' + \
                 b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff' + \
                 b'\xff\xff\xff\xff\xff\x7f\x7f\x7f\x3f\x1f\x1f\x0f\x07\x01\x00\x00')

def OLED():
    if ("VK-RA4W1" in BRD) or ("VK-RA6M3" in BRD):
        ch = 1
    elif "VK-RA6M5" in BRD:
        ch = 2
    else:
        ch = 0
    oled = SSD1306_I2C(128,64, I2C(ch))
    # micropython LOGO
    oled.fill(0)
    oled.fill_rect(0, 0, 60, 64, 1)
    oled.fill_rect(2, 2, 56, 60, 0)
    oled.vline(16, 16, 46, 1)
    oled.vline(30, 2, 46, 1)
    oled.vline(44, 16, 46, 1)
    oled.fill_rect(49, 50, 5, 8, 1)
    # vekatech LOGO
    oled.blit(FrameBuffer(Logo, 64, 64, MONO_VLSB), 64, 0)
    oled.show()

def TFT():
    if ("VK-RA4W1" in BRD) or ("VK-RA6M5" in BRD):
        ch = 0
    elif "VK-RA6M3" in BRD:
        ch = 1
    else:
        ch = -1
    tft = ST7789(SPI(ch, baudrate=40000000, polarity=1), 240, 240, reset=Pin('D9', Pin.OUT), dc=Pin('D8', Pin.OUT))
    BL = Pin('D7',Pin.OUT)
    tft.init()
    BL.on()
    # BG flag
    tft.fill_rect(0, 0, 240, 80, WHITE)
    tft.fill_rect(0, 80, 240, 80, GREEN)
    tft.fill_rect(0, 160, 240, 80, RED)